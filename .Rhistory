str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
),
description = case_when(
(version=="Name is Bill" & str_detect(condition,"Know")) ~ "Bill",
(version=="Name is Bill" & str_detect(condition,"Think")) ~ "Bill",
(version=="Chess Champion" & str_detect(condition,"Know")) ~ "Chess Champion",
(version=="Chess Champion" & str_detect(condition,"Think")) ~ "Chess Champion",                       str_detect(condition,"Barista") ~ "Barista"
)) %>%
select(ResponseId,response,attitude,question,description)
d.sum <- d1l %>% group_by(attitude, question,description) %>% summarise(
N    = length(response),
mean = mean(response, na.rm=TRUE),
sd   = sd(response,na.rm=TRUE),
se   = sd / sqrt(N)
)
fig1 <- ggplot(d.sum, aes(x=description, y=mean, fill=attitude)) +
geom_bar(position="dodge", stat="identity")  +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=position_dodge(.9)) +
facet_wrap(~question) +
#scale_fill_manual(values=wes_palette("Moonrise2",3)) +
#ylab("Judgment of Event") +
#xlab("") +
#coord_cartesian(ylim=c(1,5)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,legend.title=element_blank()
,legend.position=c(.65,.75)
,legend.text=element_text(size=rel(1.4))
,axis.text.y=element_text(size=rel(1.5))
#,axis.text.x=element_blank()
,axis.title.y=element_text(vjust=.9)
,axis.ticks = element_blank()
,strip.text=element_text(size=rel(1.5))
,axis.title=element_text(size=rel(1.5))
)
fig1
table(d1l$condition)
d1l <- d1 %>%
filter(time>cutoff) %>%
filter(Control1=="coffee shop") %>%
filter(Control2=="His middle name is Eugene") %>%
gather(condition,response,-c(1,10:13),na.rm = T) %>%
mutate(condition = factor(condition),
attitude = case_when(
str_detect(condition,"Know") ~ "Know",
str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
),
description = case_when(
(version=="Name is Bill" & str_detect(condition,"Know")) ~ "Bill",
(version=="Name is Bill" & str_detect(condition,"Think")) ~ "Bill",
(version=="Chess Champion" & str_detect(condition,"Know")) ~ "Chess Champion",
(version=="Chess Champion" & str_detect(condition,"Think")) ~ "Chess Champion",                       str_detect(condition,"Barista") ~ "Barista"
))
table(d1l$condition)
fig1
d1l <- d1 %>%
filter(time>cutoff) %>%
filter(Control1=="coffee shop") %>%
filter(Control2=="His middle name is Eugene") %>%
gather(condition,response,-c(1,10:13),na.rm = T) %>%
mutate(condition = factor(condition),
attitude = case_when(
str_detect(condition,"Know") ~ "Know",
str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
),
description = case_when(
(version=="Name is Bill" & str_detect(condition,"Know")) ~ "Bill",
(version=="Name is Bill" & str_detect(condition,"Think")) ~ "Bill",
(version=="Chess Champion" & str_detect(condition,"Know")) ~ "Chess Champion",
(version=="Chess Champion" & str_detect(condition,"Think")) ~ "Chess Champion",                       TRUE ~ "Barista"
)) %>%
select(ResponseId,response,attitude,question,description)
d.sum <- d1l %>% group_by(attitude, question,description) %>% summarise(
N    = length(response),
mean = mean(response, na.rm=TRUE),
sd   = sd(response,na.rm=TRUE),
se   = sd / sqrt(N)
)
fig1 <- ggplot(d.sum, aes(x=description, y=mean, fill=attitude)) +
geom_bar(position="dodge", stat="identity")  +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=position_dodge(.9)) +
facet_wrap(~question) +
#scale_fill_manual(values=wes_palette("Moonrise2",3)) +
#ylab("Judgment of Event") +
#xlab("") +
#coord_cartesian(ylim=c(1,5)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,legend.title=element_blank()
,legend.position=c(.65,.75)
,legend.text=element_text(size=rel(1.4))
,axis.text.y=element_text(size=rel(1.5))
#,axis.text.x=element_blank()
,axis.title.y=element_text(vjust=.9)
,axis.ticks = element_blank()
,strip.text=element_text(size=rel(1.5))
,axis.title=element_text(size=rel(1.5))
)
fig1
d1l <- d1 %>%
filter(time>cutoff) %>%
filter(Control1=="coffee shop") %>%
filter(Control2=="His middle name is Eugene") %>%
gather(condition,response,-c(1,10:13),na.rm = T) %>%
mutate(condition = factor(condition),
attitude = case_when(
str_detect(condition,"Know") ~ "Know",
str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
)
)
table(d1l$condition)
d1a <- read.csv("../data/study1a.csv", stringsAsFactors = F)
d1b <- read.csv("../data/study1b.csv", stringsAsFactors = F)
d1a$version <- "Name is Bill"
d1b$version <- "Chess Champion"
d1 <- rbind(d1a,d1b)
d1$time <- rowSums(d1[,grep("Submit",names(d1))],na.rm=T)
hist(d1$time[d1$time<50])
cutoff <- quantile(d1$time,probs=(.05))[[1]]
ExpDvs <- grep("Bill_", names(d1))
CntrDvs <- grep("Barista_",names(d1))
d1 <- d1[,c(9,ExpDvs,CntrDvs,42:43,59:60)]
d1l <- d1 %>%
filter(time>cutoff) %>%
filter(Control1=="coffee shop") %>%
filter(Control2=="His middle name is Eugene") %>%
gather(condition,response,-c(1,10:13),na.rm = T) %>%
mutate(condition = factor(condition),
attitude = case_when(
str_detect(condition,"Know") ~ "Know",
str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
)
)
View(d1l)
d1l <- d1 %>%
filter(time>cutoff) %>%
filter(Control1=="coffee shop") %>%
filter(Control2=="His middle name is Eugene") %>%
gather(condition,response,-c(1,10:13),na.rm = T) %>%
mutate(condition = factor(condition),
attitude = case_when(
str_detect(condition,"Know") ~ "Know",
str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
),
description = case_when(
version=="Name is Bill" ~ "Bill",
version=="Name is Bill" ~ "Bill",
version=="Chess Champion" ~ "Chess Champion",
version=="Chess Champion" ~ "Chess Champion",
TRUE ~ "Barista"
)) %>%
select(ResponseId,response,attitude,question,description)
d.sum <- d1l %>% group_by(attitude, question,description) %>% summarise(
N    = length(response),
mean = mean(response, na.rm=TRUE),
sd   = sd(response,na.rm=TRUE),
se   = sd / sqrt(N)
)
fig1 <- ggplot(d.sum, aes(x=description, y=mean, fill=attitude)) +
geom_bar(position="dodge", stat="identity")  +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=position_dodge(.9)) +
facet_wrap(~question) +
#scale_fill_manual(values=wes_palette("Moonrise2",3)) +
#ylab("Judgment of Event") +
#xlab("") +
#coord_cartesian(ylim=c(1,5)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,legend.title=element_blank()
,legend.position=c(.65,.75)
,legend.text=element_text(size=rel(1.4))
,axis.text.y=element_text(size=rel(1.5))
#,axis.text.x=element_blank()
,axis.title.y=element_text(vjust=.9)
,axis.ticks = element_blank()
,strip.text=element_text(size=rel(1.5))
,axis.title=element_text(size=rel(1.5))
)
fig1
d1l <- d1 %>%
filter(time>cutoff) %>%
filter(Control1=="coffee shop") %>%
filter(Control2=="His middle name is Eugene") %>%
gather(condition,response,-c(1,10:13),na.rm = T) %>%
mutate(condition = factor(condition),
attitude = case_when(
str_detect(condition,"Know") ~ "Know",
str_detect(condition,"KBase") ~ "Know",
str_detect(condition,"Think") ~ "Think",
str_detect(condition,"TBase") ~ "Think"
),
question = case_when(
str_detect(condition,"Baseline") ~ "Collects Stamps",
str_detect(condition,"Know") ~ "Favorite Color",
str_detect(condition,"Think") ~ "Favorite Color"
),
description = case_when(
str_detect(condition,"Barista") ~ "Barista",
version=="Name is Bill" ~ "Bill",
version=="Name is Bill" ~ "Bill",
version=="Chess Champion" ~ "Chess Champion",
version=="Chess Champion" ~ "Chess Champion",
)) %>%
select(ResponseId,response,attitude,question,description)
d.sum <- d1l %>% group_by(attitude, question,description) %>% summarise(
N    = length(response),
mean = mean(response, na.rm=TRUE),
sd   = sd(response,na.rm=TRUE),
se   = sd / sqrt(N)
)
fig1 <- ggplot(d.sum, aes(x=description, y=mean, fill=attitude)) +
geom_bar(position="dodge", stat="identity")  +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1, position=position_dodge(.9)) +
facet_wrap(~question) +
#scale_fill_manual(values=wes_palette("Moonrise2",3)) +
#ylab("Judgment of Event") +
#xlab("") +
#coord_cartesian(ylim=c(1,5)) +
theme_bw() +
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,legend.title=element_blank()
,legend.position=c(.65,.75)
,legend.text=element_text(size=rel(1.4))
,axis.text.y=element_text(size=rel(1.5))
#,axis.text.x=element_blank()
,axis.title.y=element_text(vjust=.9)
,axis.ticks = element_blank()
,strip.text=element_text(size=rel(1.5))
,axis.title=element_text(size=rel(1.5))
)
fig1
d1w <- d1l %>% pivot_wider(names_from=c(attitude,description,question),values_from=response)
View(d1w)
## this is the test for the experimental chess champion condition
t.test(d1w$`Know_Chess Champion_Favorite Color`,d1w$`Think_Chess Champion_Favorite Color`)
d1w1 <- d1l %>% spread(question,response)
View(d1w1)
d1w1 <- d1l %>% spread(question,response) %>%
mutate(difference = `Collects Stamps` - `Favorite Color`)
d1w1 <- d1l %>% spread(question,response) %>%
mutate(difference = `Favorite Color`- `Collects Stamps`)
d1w1.1 <- d1w1 %>% pivot_wider(names_from = c(attitude,description), values_from=difference)
View(d1w1.1)
names(d1w1)
d1w1.1 <- d1w1 %>% select(-c(`Collects Stamps`,`Favorite Color`)) %>%
pivot_wider(names_from = c(attitude,description), values_from=difference)
View(d1w1.1)
View(d1w1.1)
t.test(d1w1.1$`Know_Chess Champion`,d1w1.1$`Think_Chess Champion`)
setwd("exampleData")
setwd("exampleData")
setwd("exampleData")
root.dir("exampleData")
?root.dir
??root.dir
## clear out the environment
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(root.dir="exampleData")
files <- list.files()
files <- list.files("exampleData")
knitr::opts_chunk$set(echo = TRUE)
## clear out the environment
rm(list=ls())
setwd("exampleData")
files <- list.files()
?list.files
setwd("exampleData\")
setwd("exampleData/")
files <- list.files()
files <- list.files(path = "exampleData")
getwd()
getwd()
setwd("exampleData")
getwd()
files <- list.files("~/exampleData")
list.files()
list.files("Music")
list.files(path="Music")
list.files(path="~/Music")
setwd("Music")
getwd()
setwd("exampleData")
files <- list.files()
for(i in 1:length(files)) assign(files[i], read.csv(files[i],header=F,stringsAsFactors=F,na.strings=c("", "NA")))
knitr::opts_chunk$set(echo = TRUE)
## clear out the environment
rm(list=ls())
files <- list.files(path=path.expand("~/exampleData"))
setwd("/Users/f003nkd/Dropbox/testableScript")
path.expand("~/exampleData"))
path.expand("~/exampleData")
getwd()
path.expand("~/exampleData"))
path.expand("~/exampleData")
list.files(path.expand("~/Pictures"))
files <- list.files("exampleData")
knitr::opts_chunk$set(echo = TRUE)
## clear out the environment
rm(list=ls())
files <- list.files("exampleData")
for(i in 1:length(files)) assign(files[i], read.csv(files[i],header=F,stringsAsFactors=F,na.strings=c("", "NA")))
setwd("exampleData")
files <- list.files()
setwd("exampleData")
## clear out the environment
rm(list=ls())
files <- list.files()
knitr::opts_chunk$set(echo = TRUE, root.dir = "exampleData")
files <- list.files()
knitr::opts_chunk$set(echo = TRUE, root.dir = "exampleData")
getwd()
knitr::opts_chunk$set(echo = TRUE, root.dir = "/exampleData")
getwd()
getwd()
xfun::magic_path("exampleData")
knitr::opts_chunk$set(echo = TRUE, root.dir = "/Users/f003nkd/Dropbox/testableScript/exampleData")
getwd()
knitr::opts_chunk$set(echo = TRUE)
## clear out the environment
rm(list=ls())
setwd("/Users/f003nkd/Dropbox/testableScript)
setwd("/Users/f003nkd/Dropbox/testableScript/exampleData")
getwd()
setwd("/Users/f003nkd/Dropbox/testableScript/exampleData")
head(get(files[1]),n=5)
print(get(files[1])[1:5,1:10])
print(get(files[1])[1:5,1:5])
setwd("exampleData")
files <- list.files()
for(i in 1:length(files)) assign(files[i], read.csv(files[i],header=F,stringsAsFactors=F,na.strings=c("", "NA")))
print(get(files[1])[1:5,1:5])
for(i in 1:length(files)){
r <- get(files[i]) # retrieve each file separately
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get the names of the participant decriptors for this file
descript <- data.frame(r[2,]) # get the names of the values for each of the descriptors
colnames(descript) <- descriptN # write the descriptor names as column names
variablesN <- as.character(r[3,]) # get the names of the data fields for this file
w <- length(c(variablesN,descriptN)) # get the total number of columns needed (width of the data)
l <- length(r[-c(1:3),1]) # get the number of trials completed (length of the data)
d <- data.frame(matrix(ncol=w,nrow=l)) # build a new dataframe with these widths and lengths
colnames(d) <- c(variablesN,descriptN) # set the column names to so that data fields come first and then the descriptors
d[,variablesN] <- r[-c(1:3),] # write the trial-level data to the dataframe
d[,descriptN] <- descript[1,descriptN] # write the descriptor-level data to each trial
d <- d[,unique(colnames(d))] # remove any redundant columns
assign(files[i],d) # rewrite the file with the descriptor info appended to each trial
}
names(get(files[1]))
setwd("exampleData")
files <- list.files()
for(i in 1:length(files)) assign(files[i], read.csv(files[i],header=F,stringsAsFactors=F,na.strings=c("", "NA")))
## clear out the environment
rm(list=ls())
setwd("exampleData")
files <- list.files()
for(i in 1:length(files)) assign(files[i], read.csv(files[i],header=F,stringsAsFactors=F,na.strings=c("", "NA")))
print(get(files[1])[1:5,1:5])
```{r exampleData}
for(i in 1:length(files)){
r <- get(files[i]) # retrieve each file separately
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get the names of the participant decriptors for this file
descript <- data.frame(r[2,]) # get the names of the values for each of the descriptors
colnames(descript) <- descriptN # write the descriptor names as column names
variablesN <- as.character(r[3,]) # get the names of the data fields for this file
w <- length(c(variablesN,descriptN)) # get the total number of columns needed (width of the data)
l <- length(r[-c(1:3),1]) # get the number of trials completed (length of the data)
d <- data.frame(matrix(ncol=w,nrow=l)) # build a new dataframe with these widths and lengths
colnames(d) <- c(variablesN,descriptN) # set the column names to so that data fields come first and then the descriptors
d[,variablesN] <- r[-c(1:3),] # write the trial-level data to the dataframe
d[,descriptN] <- descript[1,descriptN] # write the descriptor-level data to each trial
d <- d[,unique(colnames(d))] # remove any redundant columns,e.g., subjectGroup gets written to both trial-level and participant-level datafields
assign(files[i],d) # rewrite the file with the descriptor info appended to each trial
}
demos <- get(files[1][1:2,][!is.na(r[1,])])
demos <- get(files[1])[1:2,]
head(demos)
demos <- get(files[1])[1:2,!is.na()]
r <- get(files[i])
descriptN <- as.character(r[1,][!is.na(r[1,])])
demos <- rbind(demos,descript) # add each participant to the data frame
r <- get(files[1]) # take the first file as an example
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get names for demographics
demos <- data.frame(r[2,]) # get first participant's demogrphic data
colnames(demos) <- descriptN # rename columns to demographic variable names
for(i in 2:length(files)){
r <- get(files[i]) # retrieve each other file separately
descript <- data.frame(r[2,]) # get that participant's demographic data
colnames(descript) <- descriptN # columns to demographic variable names
demos <- rbind(demos,descript) # add each participant to the data frame
}
View(demos)
demos <- demos[,!is.na()]
demos <- demos[,!is.na(names(demos))]
print(demos[1:5,1:10])
r <- get(files[1]) # take the first file as an example
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get names for demographics
demos <- data.frame(r[2,][!is.na(r[2,])]) # get first participant's demographic data
colnames(demos) <- descriptN # rename columns to demographic variable names
r <- get(files[1]) # take the first file as an example
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get names for demographics
demos <- data.frame(r[2,]) # get first participant's demographic data
colnames(demos) <- descriptN # rename columns to demographic variable names
for(i in 2:length(files)){
r <- get(files[i]) # retrieve each other file separately
descript <- data.frame(r[2,]) # get that participant's demographic data
colnames(descript) <- descriptN # columns to demographic variable names
demos <- rbind(demos,descript) # add each participant to the data frame
}
demos <- demos[,!is.na(names(demos))]
print(demos[1:5,1:5])
for(i in 1:length(files)){
r <- get(files[i]) # retrieve each file separately
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get the names of the participant decriptors for this file
descript <- data.frame(r[2,]) # get the values for each of the descriptors
colnames(descript) <- descriptN # write the descriptor names as column names
variablesN <- as.character(r[3,]) # get the names of the data fields for this file
w <- length(c(variablesN,descriptN)) # get the total number of columns needed (width of the data)
l <- length(r[-c(1:3),1]) # get the number of trials completed (length of the data)
d <- data.frame(matrix(ncol=w,nrow=l)) # build a new dataframe with these widths and lengths
colnames(d) <- c(variablesN,descriptN) # set the column names to so that data fields come first and then the descriptors
d[,variablesN] <- r[-c(1:3),] # write the trial-level data to the dataframe
d[,descriptN] <- descript[1,descriptN] # write the descriptor-level data to each trial
d <- d[,unique(colnames(d))] # remove any redundant columns,e.g., subjectGroup gets written to both trial-level and participant-level datafields
assign(files[i],d) # rewrite the file with the descriptor info appended to each trial
}
## clear out the environment
rm(list=ls())
setwd("exampleData")
files <- list.files()
for(i in 1:length(files)) assign(files[i], read.csv(files[i],header=F,stringsAsFactors=F,na.strings=c("", "NA")))
print(get(files[1])[1:5,1:5])
for(i in 1:length(files)){
r <- get(files[i]) # retrieve each file separately
descriptN <- as.character(r[1,][!is.na(r[1,])]) # get the names of the participant decriptors for this file
descript <- data.frame(r[2,]) # get the values for each of the descriptors
colnames(descript) <- descriptN # write the descriptor names as column names
variablesN <- as.character(r[3,]) # get the names of the data fields for this file
w <- length(c(variablesN,descriptN)) # get the total number of columns needed (width of the data)
l <- length(r[-c(1:3),1]) # get the number of trials completed (length of the data)
d <- data.frame(matrix(ncol=w,nrow=l)) # build a new dataframe with these widths and lengths
colnames(d) <- c(variablesN,descriptN) # set the column names to so that data fields come first and then the descriptors
d[,variablesN] <- r[-c(1:3),] # write the trial-level data to the dataframe
d[,descriptN] <- descript[1,descriptN] # write the descriptor-level data to each trial
d <- d[,unique(colnames(d))] # remove any redundant columns,e.g., subjectGroup gets written to both trial-level and participant-level datafields
assign(files[i],d) # rewrite the file with the descriptor info appended to each trial
}
print(get(files[1])[1:5,c(1:5,24:29)])
?print()
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(lme4)
library(tidyverse)
blackGreyPalette <- c("#2C3539", "#999999")
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
d1b <- read.csv("Full Set Norming Data 2_10_21.csv")
d1a <- read.csv("Trial File 1/File1DataUpdated.csv")
